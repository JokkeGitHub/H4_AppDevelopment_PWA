@page "/imageuploader"
@inject HttpClient Http

<PageTitle>Image Uploader</PageTitle>

<h3>ImageUploader</h3>

<p>This component is for saving turkey images.</p>

<!--                      UPLOAD TURKEY IMAGES                          -->
<div class="row-cols-12">
    <p>
        <label>
            Max file size:
            <input type="number" @bind="maxFileSize" />
        </label>
    </p>
    <p>
        <label>
            Max allowed files:
            <input type="number" @bind="maxAllowedFiles" />
        </label>
    </p>
    <p>
        <label>
            Upload up to @maxAllowedFiles of up to @maxFileSize bytes by selecting a file or drop it on the button:
            <InputFile OnChange="@LoadFiles" multiple accept=".jpg,.jpeg,.png,.JPG,.JPEG,.PNG" />
        </label>
    </p>

    @if (isLoading)
    {
        <p>Hatching turkey eggs...</p>
    }
    else
    {
        <ul>
            @foreach (var file in loadedFiles)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}


</div>

<!--                 UPDATE AND CLEAR LOCAL STORAGE                          -->
<div>
    <h1>Your LocalStorage Note</h1>

    <textarea @bind="noteContent" /> <!-- THIS SHOULD BE LOADED FILES -->
    <br />
    <button @onclick="UpdateLocalStorage">Save</button>
    <button @onclick="ClearLocalStorage">Clear</button>

</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

                    //then you can send the base64 data to the server side and insert it into database.

                    // SAVE IMAGE HERE

                    //show the thumbnails image
                    isdisplayimage = "block";
                }
                else
                {
                    isdisplayimage = "none";
                };
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }
        isLoading = false;
    }

    /*                          UPDATE AND CLEAR LOCAL STORAGE                                       */
    const string noteKey = "note";
    string noteContent; // SHOULD BE LOADED FILES
    string noteContent; // SHOULD BE LOADED FILES

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
