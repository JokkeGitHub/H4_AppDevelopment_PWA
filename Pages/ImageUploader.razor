@page "/imageuploader"
@using System
@using System.IO
@using Microsoft.Extensions.Logging
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject ILogger<ImageUploader> Logger

<PageTitle>Image Uploader</PageTitle>
<tr>
    <th><h2>Image Uploader</h2></th>
    <th><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This component is for uploading and saving turkey images.</p></th>
</tr>

<br />

<div>
    <p>
        <label>
            <InputFile OnChange="@LoadFiles" multiple accept=".jpg,.jpeg,.png,.JPG,.JPEG,.PNG" />
        </label>
    </p>

    @if (isLoading)
    {
        <p>Hatching turkey eggs...</p>
    }
    else
    {
        
        <ul>
            @foreach (var file in loadedFiles)
            {
                <li>
                    <ul>
                        <li><button @onclick="HideAndUnhideEdit">Edit</button><label id="fileName">Name: @file.Name</label><input hidden="@HideLabel" type="text" @bind-value="@uploadedImage.Name" /><button hidden="@HideLabel" @onclick="(() => ChangeName(uploadedImage))">Confirm</button></li>
                        <li>Last modified: @file.LastModified.ToString()</li>
                        <li>Size (bytes): @file.Size</li>
                        <li>Content type: @file.ContentType</li>
                        <li>Extension: @extensionname</li>
                        <li style="display:@isdisplayimage">
                            <img alt="" src="@base64data" style="height:100px;width:100px;" />
                        </li>
                        <button @onclick="(() => AddImageToList(uploadedImage))">Save Image</button>
                    </ul>
                </li>
            }
        </ul>

        @foreach (var image in uploadedImagesList)
        {
            <tr>
                <td style="display:@isdisplayimage">
                            <img alt="" src="@image.Base64Data" style="height:100px;width:100px;" /></td>
                <td>@image.Name </td>
                <td>@image.Type </td>
                <td>@image.File </td>
            </tr>
        }
    }
</div>

<div>
    <h1>Your LocalStorage Note</h1>

    <textarea @bind="noteContent" /> <!-- THIS SHOULD BE LOADED FILES -->
    <br />
    <button @onclick="UpdateLocalStorage">Save</button>
    <button @onclick="ClearLocalStorage">Clear</button>
</div>

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 10;
    private bool isLoading;
    private string extensionname = "default";
    private string base64data = ""; //you can set a defaut image
    private string isdisplayimage;
    UploadedImage uploadedImage = new UploadedImage();
    List<UploadedImage> uploadedImagesList = new List<UploadedImage>();

    const string noteKey = "note";
    string noteContent; // SHOULD BE LOADED FILES


    private bool HideLabel { get; set; } = false;


    //InputFile Change event
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                //get the upload file extension.
                extensionname = Path.GetExtension(file.Name);

                var imagefiletypes = new List<string>() {
                    ".png",".jpg",".jpeg", ".PNG", ".JPG", ".JPEG"
                };
                if (imagefiletypes.Contains(extensionname))
                {
                    //resize the image and create the thumbnails
                    var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
                    var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data

                    using (var stream = resizedFile.OpenReadStream())
                    {
                        await stream.ReadAsync(buf); // copy the stream to the buffer
                    }
                    base64data = "data:image/png;base64," + Convert.ToBase64String(buf); // convert to a base64 string!!

                    //then you can send the base64 data to the server side and insert it into database.

                    //UploadedImage test = new UploadedImage();


                    // UploadedImage newImage = uploadedImage;
                    //uploadedImagesList.Add(newImage);
                    //show the thumbnails image
                    isdisplayimage = "block";
                }
                else
                {
                    isdisplayimage = "none";
                };


            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", file.Name, ex.Message);
            }

            // SAVE IMAGE HERE
            uploadedImage.File = loadedFiles[0];
            uploadedImage.Type = extensionname;
            uploadedImage.Base64Data = base64data;
            uploadedImage.Name = file.Name;
            uploadedImage.Size = file.Size;
        }
        isLoading = false;

    }

    public async void UpdateLocalStorage()
    {
        await localStore.SetItemAsync(noteKey, noteContent); // noteContent = LOADED FILES
    }

    public async void ClearLocalStorage()
    {
        noteContent = "";
        await localStore.ClearAsync();
        //await localStore.RemoveItemAsync(key); // This one for removing individual items
    }

    protected override async Task OnInitializedAsync()
    {
        noteContent = await localStore.GetItemAsync<string>(noteKey);
        //await localStore.GetItemAsync(List<ImageFile>>("imageKey"));
    }

    public void HideAndUnhideEdit()
    {
        HideLabel = !HideLabel;
    }

    protected async Task ChangeName(UploadedImage uploadedImage)
    {
        uploadedImage.Name = "";
        HideAndUnhideEdit();
    }

    protected async Task AddImageToList(UploadedImage uploadedImage)
    {
        UploadedImage newImage = new UploadedImage();
        newImage = uploadedImage;
        uploadedImagesList.Add(newImage);
        // Add to grid
    }
}
